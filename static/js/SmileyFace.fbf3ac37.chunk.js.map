{"version":3,"sources":["components/Sketches/SmileyFace/Eye.jsx","components/Sketches/SmileyFace/Smile.jsx","components/Sketches/SmileyFace/index.jsx","pages/SmileyFace.jsx"],"names":["Eye","position","x","y","size","showPupil","EYEBALL_SIZE","PUPIL_SIZE","handlePupilPosition","useMemo","getConstraint","p","radius","circle","createVector","result","map","mouseX","width","mouseY","height","dist","sub","setMag","add","generateCircleContraint","fill","noStroke","Mouth","start","radians","stop","Smile","tonguePosition","isStatic","id","LEFT_EYE_POSITION","HEAD_SIZE","RIGHT_EYE_POSITION","SMILE_POSITION","Eyes","showPupils","SmileyFace","SmileyFacePage","SketchWrapper","title","draw","colors","angleMode","DEGREES","angle","constrain"],"mappings":"wMAmBO,SAASA,EAAT,GAAoE,IAAD,IAApDC,gBAAoD,MAAzC,CAAEC,EAAG,EAAGC,EAAG,GAA8B,MAAzBC,YAAyB,MAAlB,IAAkB,EAAbC,EAAa,EAAbA,UACnDC,EAAeF,EACfG,EAAaH,EAAO,EAEpBI,EAAsBC,mBAAQ,WAChC,IAAMC,EAAgB,SAAAC,GAAM,IAClBT,EAASD,EAATC,EAAGC,EAAMF,EAANE,EAGT,MAFiB,oBAAND,IAAkBA,EAAIA,EAAES,IAClB,oBAANR,IAAkBA,EAAIA,EAAEQ,IAxBf,SAACA,EAAGC,EAAQX,GACxC,IAAMY,EAASF,EAAEG,aAAab,EAASC,EAAGD,EAASE,GAC7CY,EAASJ,EAAEG,aACbH,EAAEK,IAAIL,EAAEM,OAAQ,EAAGN,EAAEO,MAAOL,EAAOX,EAAIU,EAAQC,EAAOX,EAAIU,GAC1DD,EAAEK,IAAIL,EAAEQ,OAAQ,EAAGR,EAAES,OAAQP,EAAOV,EAAIS,EAAQC,EAAOV,EAAIS,IAS/D,OAPmBD,EAAEU,KAAKN,EAAOb,EAAGa,EAAOZ,EAAGU,EAAOX,EAAGW,EAAOV,GAAKS,IAGhEG,EAAOO,IAAIT,GACXE,EAAOQ,OAAOX,GACdG,EAAOS,IAAIX,IAERE,EAYQU,CACHd,EACAL,EAAe,EACfK,EAAEG,aAAaZ,EAAGC,KAI1B,MAAO,CACHD,EAAG,SAAAS,GAAC,OAAID,EAAcC,GAAGT,GACzBC,EAAG,SAAAQ,GAAC,OAAID,EAAcC,GAAGR,MAE9B,CAACG,EAAcL,IAClB,OACI,oCACI,kBAAC,IAAD,iBAAYA,EAAZ,CAAsBG,KAAME,EAAcoB,KAAM,IAAKC,UAAQ,KAC5DtB,GACG,kBAAC,IAAD,iBACQG,EADR,CAEIJ,KAAMG,EACNmB,KAAM,EACNC,UAAQ,MC7C5B,IAAMC,EAAQ,SAAC,GAAD,IAAG3B,EAAH,EAAGA,SAAH,OACV,kBAAC,IAAD,iBACQA,EADR,CAEIiB,MAAO,IACPE,OAAQ,IACRM,KAAK,OACLG,MAAO,SAAAlB,GAAC,OAAIA,EAAEmB,QAAQ,IACtBC,KAAM,SAAApB,GAAC,OAAIA,EAAEmB,QAAQ,MACrBH,UAAQ,MAIT,SAASK,EAAT,GAA8B,IAAb/B,EAAY,EAAZA,SACdgC,EAAiBxB,mBACnB,SAAAE,GAAC,MAAK,CACFT,EAAG,SAAAS,GAAM,IACCT,EAAMD,EAANC,EAEN,MADiB,oBAANA,IAAkBA,EAAIA,EAAES,IAC5BT,EAAI,IAEfC,EAAG,SAAAQ,GAAM,IACCR,EAAMF,EAANE,EAEN,MADiB,oBAANA,IAAkBA,EAAIA,EAAEQ,IAC5BR,EAAI,QAGnB,CAACF,IAEL,OACI,kBAAC,IAAD,CAAOiC,UAAQ,EAACC,GAAG,SACf,kBAAC,EAAD,CAAOlC,SAAUA,IACjB,kBAAC,IAAD,iBAAYgC,EAAZ,CAA4B7B,KAAM,IAAKsB,KAAK,OAAOC,UAAQ,KAC3D,kBAAC,IAAD,CAAMQ,GAAG,cACL,kBAAC,EAAD,CAAOlC,SAAUA,MC/BjC,IAEMmC,EAAoB,CACtBlC,EAAG,SAAAS,GAAC,OAAIA,EAAEO,MAAQ,EAAImB,IACtBlC,EAAG,KAGDmC,EAAqB,CACvBpC,EAAG,SAAAS,GAAC,OAAIA,EAAEO,MAAQ,EAAImB,IACtBlC,EAAG,KAEDoC,EAAiB,CACnBrC,EAAG,SAAAS,GAAC,OAAIA,EAAEO,MAAQ,GAClBf,EAAG,SAAAQ,GAAC,OAAIA,EAAES,OAAS,EAAI,KAGrBoB,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACT,oCACI,kBAACzC,EAAD,CACII,KAlBK,GAmBLH,SAAUmC,EACV/B,UAAWoC,IAEf,kBAACzC,EAAD,CACII,KAvBK,GAwBLH,SAAUqC,EACVjC,UAAWoC,MAKhB,SAASC,IACZ,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIxC,EAAG,SAAAS,GAAC,OAAIA,EAAEO,MAAQ,GAClBf,EAAG,SAAAQ,GAAC,OAAIA,EAAES,OAAS,GACnBhB,KArCE,IAsCFsB,KAAM,CAAC,IAAK,IAAK,KACjBC,UAAQ,IAEZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAMc,YAAY,KAEtB,kBAAC,EAAD,CAAMA,YAAY,KAEtB,kBAACT,EAAD,CAAO/B,SAAUsC,K,aC/Cd,SAASI,IACpB,OACI,kBAACC,EAAA,EAAD,CACIC,MAAM,aACNC,KACI,oCACI,kBAAC,IAAD,CACIC,OAAQ,CACJ,CAAC,IAAK,IAAK,KACX,SAAApC,GAAC,OAAIA,EAAEK,IAAIL,EAAEQ,OAAQ,EAAGR,EAAES,OAAQ,IAAK,IACvC,CAAC,IAAK,IAAK,MAEf4B,UAAW,SAAArC,GAAC,OAAIA,EAAEsC,SAClBC,MAAO,SAAAvC,GAAC,OACJA,EAAEwC,UACExC,EAAEK,IAAIL,EAAEM,OAAQ,EAAGN,EAAEO,MAAO,EAAG,KAC/B,EACA,QAIZ,kBAACwB,EAAD","file":"static/js/SmileyFace.fbf3ac37.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { Circle } from 'p5-react';\n\nconst generateCircleContraint = (p, radius, position) => {\n    const circle = p.createVector(position.x, position.y);\n    const result = p.createVector(\n        p.map(p.mouseX, 0, p.width, circle.x - radius, circle.x + radius),\n        p.map(p.mouseY, 0, p.height, circle.y - radius, circle.y + radius)\n    );\n    const isInBounds = p.dist(result.x, result.y, circle.x, circle.y) < radius;\n\n    if (!isInBounds) {\n        result.sub(circle);\n        result.setMag(radius);\n        result.add(circle);\n    }\n    return result;\n};\n\nexport function Eye({ position = { x: 0, y: 0 }, size = 100, showPupil }) {\n    const EYEBALL_SIZE = size;\n    const PUPIL_SIZE = size / 3;\n\n    const handlePupilPosition = useMemo(() => {\n        const getConstraint = p => {\n            let { x, y } = position;\n            if (typeof x === 'function') x = x(p);\n            if (typeof y === 'function') y = y(p);\n            return generateCircleContraint(\n                p,\n                EYEBALL_SIZE / 2,\n                p.createVector(x, y)\n            );\n        };\n\n        return {\n            x: p => getConstraint(p).x,\n            y: p => getConstraint(p).y,\n        };\n    }, [EYEBALL_SIZE, position]);\n    return (\n        <>\n            <Circle {...position} size={EYEBALL_SIZE} fill={255} noStroke />\n            {showPupil && (\n                <Circle\n                    {...handlePupilPosition}\n                    size={PUPIL_SIZE}\n                    fill={0}\n                    noStroke\n                />\n            )}\n        </>\n    );\n}\n","import React, { useMemo } from 'react';\nimport { Layer, Mask, Arc, Circle } from 'p5-react';\n\nconst Mouth = ({ position }) => (\n    <Arc\n        {...position}\n        width={230}\n        height={230}\n        fill=\"#947\"\n        start={p => p.radians(0)}\n        stop={p => p.radians(180)}\n        noStroke\n    />\n);\n\nexport function Smile({ position }) {\n    const tonguePosition = useMemo(\n        p => ({\n            x: p => {\n                let { x } = position;\n                if (typeof x === 'function') x = x(p);\n                return x - 50;\n            },\n            y: p => {\n                let { y } = position;\n                if (typeof y === 'function') y = y(p);\n                return y + 100;\n            },\n        }),\n        [position]\n    );\n    return (\n        <Layer isStatic id=\"smile\">\n            <Mouth position={position} />\n            <Circle {...tonguePosition} size={150} fill=\"#fad\" noStroke />\n            <Mask id=\"smile mask\">\n                <Mouth position={position} />\n            </Mask>\n        </Layer>\n    );\n}\n","import React from 'react';\nimport { Eye } from './Eye';\nimport { Circle, Layer, Mask } from 'p5-react';\nimport { Smile } from './Smile';\n\nconst HEAD_SIZE = 300;\nconst EYE_SIZE = 80;\nconst LEFT_EYE_POSITION = {\n    x: p => p.width / 2 - HEAD_SIZE / 4,\n    y: 135,\n};\n\nconst RIGHT_EYE_POSITION = {\n    x: p => p.width / 2 + HEAD_SIZE / 4,\n    y: 135,\n};\nconst SMILE_POSITION = {\n    x: p => p.width / 2,\n    y: p => p.height / 2 + 10,\n};\n\nconst Eyes = ({ showPupils }) => (\n    <>\n        <Eye\n            size={EYE_SIZE}\n            position={LEFT_EYE_POSITION}\n            showPupil={showPupils}\n        />\n        <Eye\n            size={EYE_SIZE}\n            position={RIGHT_EYE_POSITION}\n            showPupil={showPupils}\n        />\n    </>\n);\n\nexport function SmileyFace() {\n    return (\n        <Layer>\n            <Circle\n                x={p => p.width / 2}\n                y={p => p.height / 2}\n                size={HEAD_SIZE}\n                fill={[245, 225, 120]}\n                noStroke\n            />\n            <Layer>\n                <Mask>\n                    <Eyes showPupils={false} />\n                </Mask>\n                <Eyes showPupils={true} />\n            </Layer>\n            <Smile position={SMILE_POSITION} />\n        </Layer>\n    );\n}\n","import React from 'react';\nimport { LinearGradient } from 'p5-react';\nimport { SmileyFace } from '../components/Sketches/SmileyFace';\nimport { SketchWrapper } from '../components/SketchWrapper';\n\nexport default function SmileyFacePage() {\n    return (\n        <SketchWrapper\n            title=\"SmileyFace\"\n            draw={\n                <>\n                    <LinearGradient\n                        colors={[\n                            [100, 200, 255],\n                            p => p.map(p.mouseY, 0, p.height, 255, 0),\n                            [255, 200, 255],\n                        ]}\n                        angleMode={p => p.DEGREES}\n                        angle={p =>\n                            p.constrain(\n                                p.map(p.mouseX, 0, p.width, 0, 360),\n                                0,\n                                360\n                            )\n                        }\n                    />\n                    <SmileyFace />\n                </>\n            }\n        ></SketchWrapper>\n    );\n}\n"],"sourceRoot":""}